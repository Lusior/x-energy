package com.xhkj.server.energy.dao.mybatis.vo;

import java.util.ArrayList;
import java.util.List;

public class PredictDataExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table data_para
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table data_para
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table data_para
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public PredictDataExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table data_para
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andCityNameIsNull() {
            addCriterion("city_name is null");
            return (Criteria) this;
        }

        public Criteria andCityNameIsNotNull() {
            addCriterion("city_name is not null");
            return (Criteria) this;
        }

        public Criteria andCityNameEqualTo(String value) {
            addCriterion("city_name =", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameNotEqualTo(String value) {
            addCriterion("city_name <>", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameGreaterThan(String value) {
            addCriterion("city_name >", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameGreaterThanOrEqualTo(String value) {
            addCriterion("city_name >=", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameLessThan(String value) {
            addCriterion("city_name <", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameLessThanOrEqualTo(String value) {
            addCriterion("city_name <=", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameLike(String value) {
            addCriterion("city_name like", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameNotLike(String value) {
            addCriterion("city_name not like", value, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameIn(List<String> values) {
            addCriterion("city_name in", values, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameNotIn(List<String> values) {
            addCriterion("city_name not in", values, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameBetween(String value1, String value2) {
            addCriterion("city_name between", value1, value2, "cityName");
            return (Criteria) this;
        }

        public Criteria andCityNameNotBetween(String value1, String value2) {
            addCriterion("city_name not between", value1, value2, "cityName");
            return (Criteria) this;
        }

        public Criteria andTw1IsNull() {
            addCriterion("Tw1 is null");
            return (Criteria) this;
        }

        public Criteria andTw1IsNotNull() {
            addCriterion("Tw1 is not null");
            return (Criteria) this;
        }

        public Criteria andTw1EqualTo(Float value) {
            addCriterion("Tw1 =", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1NotEqualTo(Float value) {
            addCriterion("Tw1 <>", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1GreaterThan(Float value) {
            addCriterion("Tw1 >", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1GreaterThanOrEqualTo(Float value) {
            addCriterion("Tw1 >=", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1LessThan(Float value) {
            addCriterion("Tw1 <", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1LessThanOrEqualTo(Float value) {
            addCriterion("Tw1 <=", value, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1In(List<Float> values) {
            addCriterion("Tw1 in", values, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1NotIn(List<Float> values) {
            addCriterion("Tw1 not in", values, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1Between(Float value1, Float value2) {
            addCriterion("Tw1 between", value1, value2, "tw1");
            return (Criteria) this;
        }

        public Criteria andTw1NotBetween(Float value1, Float value2) {
            addCriterion("Tw1 not between", value1, value2, "tw1");
            return (Criteria) this;
        }

        public Criteria andTpj1IsNull() {
            addCriterion("Tpj1 is null");
            return (Criteria) this;
        }

        public Criteria andTpj1IsNotNull() {
            addCriterion("Tpj1 is not null");
            return (Criteria) this;
        }

        public Criteria andTpj1EqualTo(Float value) {
            addCriterion("Tpj1 =", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1NotEqualTo(Float value) {
            addCriterion("Tpj1 <>", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1GreaterThan(Float value) {
            addCriterion("Tpj1 >", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1GreaterThanOrEqualTo(Float value) {
            addCriterion("Tpj1 >=", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1LessThan(Float value) {
            addCriterion("Tpj1 <", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1LessThanOrEqualTo(Float value) {
            addCriterion("Tpj1 <=", value, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1In(List<Float> values) {
            addCriterion("Tpj1 in", values, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1NotIn(List<Float> values) {
            addCriterion("Tpj1 not in", values, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1Between(Float value1, Float value2) {
            addCriterion("Tpj1 between", value1, value2, "tpj1");
            return (Criteria) this;
        }

        public Criteria andTpj1NotBetween(Float value1, Float value2) {
            addCriterion("Tpj1 not between", value1, value2, "tpj1");
            return (Criteria) this;
        }

        public Criteria andNIsNull() {
            addCriterion("N is null");
            return (Criteria) this;
        }

        public Criteria andNIsNotNull() {
            addCriterion("N is not null");
            return (Criteria) this;
        }

        public Criteria andNEqualTo(Integer value) {
            addCriterion("N =", value, "n");
            return (Criteria) this;
        }

        public Criteria andNNotEqualTo(Integer value) {
            addCriterion("N <>", value, "n");
            return (Criteria) this;
        }

        public Criteria andNGreaterThan(Integer value) {
            addCriterion("N >", value, "n");
            return (Criteria) this;
        }

        public Criteria andNGreaterThanOrEqualTo(Integer value) {
            addCriterion("N >=", value, "n");
            return (Criteria) this;
        }

        public Criteria andNLessThan(Integer value) {
            addCriterion("N <", value, "n");
            return (Criteria) this;
        }

        public Criteria andNLessThanOrEqualTo(Integer value) {
            addCriterion("N <=", value, "n");
            return (Criteria) this;
        }

        public Criteria andNIn(List<Integer> values) {
            addCriterion("N in", values, "n");
            return (Criteria) this;
        }

        public Criteria andNNotIn(List<Integer> values) {
            addCriterion("N not in", values, "n");
            return (Criteria) this;
        }

        public Criteria andNBetween(Integer value1, Integer value2) {
            addCriterion("N between", value1, value2, "n");
            return (Criteria) this;
        }

        public Criteria andNNotBetween(Integer value1, Integer value2) {
            addCriterion("N not between", value1, value2, "n");
            return (Criteria) this;
        }

        public Criteria andFIsNull() {
            addCriterion("F is null");
            return (Criteria) this;
        }

        public Criteria andFIsNotNull() {
            addCriterion("F is not null");
            return (Criteria) this;
        }

        public Criteria andFEqualTo(Float value) {
            addCriterion("F =", value, "f");
            return (Criteria) this;
        }

        public Criteria andFNotEqualTo(Float value) {
            addCriterion("F <>", value, "f");
            return (Criteria) this;
        }

        public Criteria andFGreaterThan(Float value) {
            addCriterion("F >", value, "f");
            return (Criteria) this;
        }

        public Criteria andFGreaterThanOrEqualTo(Float value) {
            addCriterion("F >=", value, "f");
            return (Criteria) this;
        }

        public Criteria andFLessThan(Float value) {
            addCriterion("F <", value, "f");
            return (Criteria) this;
        }

        public Criteria andFLessThanOrEqualTo(Float value) {
            addCriterion("F <=", value, "f");
            return (Criteria) this;
        }

        public Criteria andFIn(List<Float> values) {
            addCriterion("F in", values, "f");
            return (Criteria) this;
        }

        public Criteria andFNotIn(List<Float> values) {
            addCriterion("F not in", values, "f");
            return (Criteria) this;
        }

        public Criteria andFBetween(Float value1, Float value2) {
            addCriterion("F between", value1, value2, "f");
            return (Criteria) this;
        }

        public Criteria andFNotBetween(Float value1, Float value2) {
            addCriterion("F not between", value1, value2, "f");
            return (Criteria) this;
        }

        public Criteria andQIsNull() {
            addCriterion("q is null");
            return (Criteria) this;
        }

        public Criteria andQIsNotNull() {
            addCriterion("q is not null");
            return (Criteria) this;
        }

        public Criteria andQEqualTo(Float value) {
            addCriterion("q =", value, "q");
            return (Criteria) this;
        }

        public Criteria andQNotEqualTo(Float value) {
            addCriterion("q <>", value, "q");
            return (Criteria) this;
        }

        public Criteria andQGreaterThan(Float value) {
            addCriterion("q >", value, "q");
            return (Criteria) this;
        }

        public Criteria andQGreaterThanOrEqualTo(Float value) {
            addCriterion("q >=", value, "q");
            return (Criteria) this;
        }

        public Criteria andQLessThan(Float value) {
            addCriterion("q <", value, "q");
            return (Criteria) this;
        }

        public Criteria andQLessThanOrEqualTo(Float value) {
            addCriterion("q <=", value, "q");
            return (Criteria) this;
        }

        public Criteria andQIn(List<Float> values) {
            addCriterion("q in", values, "q");
            return (Criteria) this;
        }

        public Criteria andQNotIn(List<Float> values) {
            addCriterion("q not in", values, "q");
            return (Criteria) this;
        }

        public Criteria andQBetween(Float value1, Float value2) {
            addCriterion("q between", value1, value2, "q");
            return (Criteria) this;
        }

        public Criteria andQNotBetween(Float value1, Float value2) {
            addCriterion("q not between", value1, value2, "q");
            return (Criteria) this;
        }

        public Criteria andTnIsNull() {
            addCriterion("Tn is null");
            return (Criteria) this;
        }

        public Criteria andTnIsNotNull() {
            addCriterion("Tn is not null");
            return (Criteria) this;
        }

        public Criteria andTnEqualTo(Float value) {
            addCriterion("Tn =", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnNotEqualTo(Float value) {
            addCriterion("Tn <>", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnGreaterThan(Float value) {
            addCriterion("Tn >", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnGreaterThanOrEqualTo(Float value) {
            addCriterion("Tn >=", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnLessThan(Float value) {
            addCriterion("Tn <", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnLessThanOrEqualTo(Float value) {
            addCriterion("Tn <=", value, "tn");
            return (Criteria) this;
        }

        public Criteria andTnIn(List<Float> values) {
            addCriterion("Tn in", values, "tn");
            return (Criteria) this;
        }

        public Criteria andTnNotIn(List<Float> values) {
            addCriterion("Tn not in", values, "tn");
            return (Criteria) this;
        }

        public Criteria andTnBetween(Float value1, Float value2) {
            addCriterion("Tn between", value1, value2, "tn");
            return (Criteria) this;
        }

        public Criteria andTnNotBetween(Float value1, Float value2) {
            addCriterion("Tn not between", value1, value2, "tn");
            return (Criteria) this;
        }

        public Criteria andQ1IsNull() {
            addCriterion("Q1 is null");
            return (Criteria) this;
        }

        public Criteria andQ1IsNotNull() {
            addCriterion("Q1 is not null");
            return (Criteria) this;
        }

        public Criteria andQ1EqualTo(Float value) {
            addCriterion("Q1 =", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1NotEqualTo(Float value) {
            addCriterion("Q1 <>", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1GreaterThan(Float value) {
            addCriterion("Q1 >", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1GreaterThanOrEqualTo(Float value) {
            addCriterion("Q1 >=", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1LessThan(Float value) {
            addCriterion("Q1 <", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1LessThanOrEqualTo(Float value) {
            addCriterion("Q1 <=", value, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1In(List<Float> values) {
            addCriterion("Q1 in", values, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1NotIn(List<Float> values) {
            addCriterion("Q1 not in", values, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1Between(Float value1, Float value2) {
            addCriterion("Q1 between", value1, value2, "q1");
            return (Criteria) this;
        }

        public Criteria andQ1NotBetween(Float value1, Float value2) {
            addCriterion("Q1 not between", value1, value2, "q1");
            return (Criteria) this;
        }

        public Criteria andLIsNull() {
            addCriterion("L is null");
            return (Criteria) this;
        }

        public Criteria andLIsNotNull() {
            addCriterion("L is not null");
            return (Criteria) this;
        }

        public Criteria andLEqualTo(Float value) {
            addCriterion("L =", value, "l");
            return (Criteria) this;
        }

        public Criteria andLNotEqualTo(Float value) {
            addCriterion("L <>", value, "l");
            return (Criteria) this;
        }

        public Criteria andLGreaterThan(Float value) {
            addCriterion("L >", value, "l");
            return (Criteria) this;
        }

        public Criteria andLGreaterThanOrEqualTo(Float value) {
            addCriterion("L >=", value, "l");
            return (Criteria) this;
        }

        public Criteria andLLessThan(Float value) {
            addCriterion("L <", value, "l");
            return (Criteria) this;
        }

        public Criteria andLLessThanOrEqualTo(Float value) {
            addCriterion("L <=", value, "l");
            return (Criteria) this;
        }

        public Criteria andLIn(List<Float> values) {
            addCriterion("L in", values, "l");
            return (Criteria) this;
        }

        public Criteria andLNotIn(List<Float> values) {
            addCriterion("L not in", values, "l");
            return (Criteria) this;
        }

        public Criteria andLBetween(Float value1, Float value2) {
            addCriterion("L between", value1, value2, "l");
            return (Criteria) this;
        }

        public Criteria andLNotBetween(Float value1, Float value2) {
            addCriterion("L not between", value1, value2, "l");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table data_para
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table data_para
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }


    ////*******自定义开始********/
    //***********自定义结束****////
}
